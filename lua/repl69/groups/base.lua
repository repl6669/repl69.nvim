local Util = require("repl69.util")

local M = {}

---@type repl69.HighlightsFn
function M.get(c, opts)
  local transparent = opts.transparent
  local styles = opts.styles

  -- stylua: ignore
  return {
    -- Base editor highlights
    ColorColumn                 = { bg = c.gray925 },
    Conceal                     = { bg = c.none },
    CurSearch                   = { fg = c.black, bg = c.green300 },
    Cursor                      = { fg = c.gray50, bg = c.gray700 },
    CursorColumn                = { bg = c.gray925 },
    CursorLine                  = { bg = c.gray925 },
    CursorLineNr                = { fg = c.gray450, bold = styles.keywords.bold },
    DiffAdd                     = { bg = c.diff.add },
    DiffChange                  = { bg = c.diff.change },
    DiffDelete                  = { bg = c.diff.delete },
    DiffText                    = { bg = c.diff.text },
    diffAdded                   = "DiffAdd",
    diffChanged                 = "DiffChange",
    diffRemoved                 = "DiffDelete",
    Directory                   = { fg = c.gray200, bold = styles.keywords.bold },
    ErrorMsg                    = { fg = c.error, bold = styles.keywords.bold },
    FloatBorder                 = { fg = c.border, bg = transparent and c.none or c.bg_float },
    FloatTitle                  = { fg = c.gray200, bg = transparent and c.none or c.bg_float, bold = styles.keywords.bold },
    FoldColumn                  = { fg = c.gray850 },
    Folded                      = { fg = c.gray50, bg = transparent and c.none or c.bg_popup },
    IncSearch                   = "CurSearch",
    LineNr                      = { fg = c.gray800 },
    MatchParen                  = { fg = c.gray500, bg = c.gray800 },
    ModeMsg                     = { fg = c.gray500 },
    MoreMsg                     = { fg = c.gray300 },
    NonText                     = { fg = c.gray850 },
    Normal                      = { fg = c.gray100, bg = transparent and c.none or c.bg },
    NormalFloat                 = { fg = c.fg_float, bg = transparent and c.none or c.bg_float },
    NormalNC                    = { fg = c.gray50, bg = transparent and c.none or c.bg },
    NvimInternalError           = "ErrorMsg",
    Pmenu                       = { fg = c.gray500, bg = transparent and c.none or c.bg_popup },
    PmenuExtra                  = { fg = c.gray850, bg = transparent and c.none or c.bg_popup },
    PmenuExtraSel               = { fg = c.gray500, bg = transparent and c.none or c.gray750 },
    PmenuKind                   = { fg = c.gray200, bg = transparent and c.none or c.bg_popup },
    PmenuKindSel                = { fg = c.gray500, bg = transparent and c.none or c.gray750 },
    PmenuSbar                   = { bg = transparent and c.none or c.bg_popup },
    PmenuSel                    = { fg = c.gray50, bg = transparent and c.none or c.gray750 },
    PmenuThumb                  = { bg = transparent and c.none or c.gray850 },
    Question                    = { fg = c.gray400 },
    RedrawDebugClear            = { fg = c.black, bg = c.gray400 },
    RedrawDebugComposed         = { fg = c.black, bg = c.gray500 },
    RedrawDebugRecompose        = { fg = c.black, bg = c.gray600 },
    Search                      = { fg = c.gray50, bg = c.gray400 },
    SignColumn                  = { fg = c.gray50, bg = transparent and c.none or c.bg },
    SpecialKey                  = { fg = c.gray200 },
    SpellBad                    = { sp = c.gray500, undercurl = true },
    SpellCap                    = { sp = c.gray500, undercurl = true },
    SpellLocal                  = { sp = c.gray500, undercurl = true },
    SpellRare                   = { sp = c.gray500, undercurl = true },
    StatusLine                  = { fg = c.gray500, bg = transparent and c.none or c.bg_statusline },
    StatusLineNC                = { fg = c.gray850, bg = transparent and c.none or c.bg_statusline },
    StatusLineTerm              = { fg = c.black, bg = c.gray500 },
    StatusLineTermNC            = { fg = c.black, bg = c.gray500 },
    Substitute                  = "IncSearch",
    TabLine                     = { fg = c.gray500, bg = transparent and c.none or c.bg_statusline },
    TabLineFill                 = { bg = transparent and c.none or c.bg_statusline },
    TabLineSel                  = { fg = c.gray50, bg = transparent and c.none or c.gray750, bold = styles.keywords.bold },
    Title                       = { fg = c.gray200, bold = styles.keywords.bold },
    VertSplit                   = { fg = c.border },
    Visual                      = { bg = c.bg_visual },
    WarningMsg                  = { fg = c.warning, bold = styles.keywords.bold },
    WildMenu                    = "IncSearch",
    WinBar                      = { fg = c.gray500, bg = transparent and c.none or c.bg_statusline },
    WinBarNC                    = { fg = c.gray850, bg = transparent and c.none or c.bg_statusline },
    WinSeparator                = { fg = c.border },

    -- Diagnostics
    DiagnosticError             = { fg = c.error },
    DiagnosticHint              = { fg = c.hint },
    DiagnosticInfo              = { fg = c.info },
    DiagnosticOk                = { fg = c.hint },
    DiagnosticWarn              = { fg = c.warning },
    DiagnosticDefaultError      = "DiagnosticError",
    DiagnosticDefaultHint       = "DiagnosticHint",
    DiagnosticDefaultInfo       = "DiagnosticInfo",
    DiagnosticDefaultOk         = "DiagnosticOk",
    DiagnosticDefaultWarn       = "DiagnosticWarn",
    DiagnosticFloatingError     = "DiagnosticError",
    DiagnosticFloatingHint      = "DiagnosticHint",
    DiagnosticFloatingInfo      = "DiagnosticInfo",
    DiagnosticFloatingOk        = "DiagnosticOk",
    DiagnosticFloatingWarn      = "DiagnosticWarn",
    DiagnosticSignError         = "DiagnosticError",
    DiagnosticSignHint          = "DiagnosticHint",
    DiagnosticSignInfo          = "DiagnosticInfo",
    DiagnosticSignOk            = "DiagnosticOk",
    DiagnosticSignWarn          = "DiagnosticWarn",
    DiagnosticUnderlineError    = { sp = c.error, undercurl = true },
    DiagnosticUnderlineHint     = { sp = c.hint, undercurl = true },
    DiagnosticUnderlineInfo     = { sp = c.info, undercurl = true },
    DiagnosticUnderlineOk       = { sp = c.hint, undercurl = true },
    DiagnosticUnderlineWarn     = { sp = c.warning, undercurl = true },
    DiagnosticVirtualTextError  = { fg = c.error },
    DiagnosticVirtualTextHint   = { fg = c.hint },
    DiagnosticVirtualTextInfo   = { fg = c.info },
    DiagnosticVirtualTextOk     = { fg = c.hint },
    DiagnosticVirtualTextWarn   = { fg = c.warning },

    -- Syntax highlighting
    Boolean                     = { fg = c.gray600, bold = styles.keywords.bold },
    Character                   = { fg = c.gray600, bold = styles.keywords.bold },
    Comment                     = { fg = c.gray700, italic = styles.comments.italic },
    Conditional                 = { fg = c.white, bold = styles.keywords.bold },
    Constant                    = { fg = c.gray600, bold = styles.keywords.bold },
    Debug                       = { fg = c.white },
    Define                      = { fg = c.white, bold = styles.keywords.bold },
    Delimiter                   = { fg = c.white },
    Error                       = { fg = c.red, bold = styles.keywords.bold },
    Exception                   = { fg = c.white },
    Float                       = { fg = c.gray600, bold = styles.keywords.bold },
    Function                    = { fg = c.gray50, bold = styles.functions.bold },
    Identifier                  = { fg = c.white, bold = styles.keywords.bold },
    Include                     = { fg = c.white, bold = styles.keywords.bold },
    Keyword                     = { fg = c.gray50, bold = styles.keywords.bold },
    Label                       = { fg = c.white },
    LspCodeLens                 = { fg = c.gray600 },
    LspCodeLensSeparator        = { fg = c.gray750 },
    LspInlayHint                = "Comment",
    LspReferenceRead            = "Visual",
    LspReferenceText            = "Visual",
    LspReferenceWrite           = "Visual",
    Macro                       = { fg = c.white, bold = styles.keywords.bold },
    Number                      = { fg = c.gray600, bold = styles.keywords.bold },
    Operator                    = { fg = c.gray300, bold = styles.keywords.bold },
    PreCondit                   = { fg = c.white, bold = styles.keywords.bold },
    PreProc                     = "PreCondit",
    Repeat                      = { fg = c.white },
    Special                     = { fg = c.white },
    SpecialChar                 = "Special",
    SpecialComment              = { fg = c.gray600, bold = styles.keywords.bold },
    Statement                   = { fg = c.white, bold = styles.keywords.bold },
    StorageClass                = { fg = c.white, bold = styles.keywords.bold },
    String                      = { fg = c.gray450 },
    Structure                   = { fg = c.white, bold = styles.keywords.bold },
    Tag                         = { fg = c.white },
    Todo                        = { fg = c.cyan500, bg = c.cyan500, bold = styles.keywords.bold },
    Type                        = { fg = c.gray50, bold = styles.keywords.bold },
    TypeDef                     = "Type",
    Underlined                  = { fg = c.gray450, underline = true },

    -- Health
    healthError                 = { fg = c.error },
    healthSuccess               = { fg = c.info },
    healthWarning               = { fg = c.warning },

    -- HTML
    htmlArg                     = { fg = c.gray300 },
    htmlBold                    = { bold = styles.keywords.bold },
    htmlEndTag                  = { fg = c.gray500 },
    htmlH1                      = "markdownH1",
    htmlH2                      = "markdownH2",
    htmlH3                      = "markdownH3",
    htmlH4                      = "markdownH4",
    markdownDelimiter           = { fg = c.gray500 },
    markdownH1                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH1Delimiter         = "markdownH1",
    markdownH2                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH2Delimiter         = "markdownH2",
    markdownH3                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH3Delimiter         = "markdownH3",
    markdownH4                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH4Delimiter         = "markdownH4",
    markdownH5                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH5Delimiter         = "markdownH5",
    markdownH6                  = { fg = c.gray200, bold = styles.keywords.bold },
    markdownH6Delimiter         = "markdownH6",
    markdownLinkText            = "markdownUrl",
    markdownUrl                 = { fg = c.gray300, sp = c.gray300, underline = true },

    -- Treesitter
    ["@variable"]               = { fg = c.white, italic = styles.variables.italic },
    ["@variable.builtin"]       = { fg = c.gray100, italic = styles.variables.italic, bold = styles.keywords.bold },
    ["@variable.parameter"]     = { fg = c.white, italic = styles.variables.italic },
    ["@variable.parameter.builtin"] = { fg = c.gray100, italic = styles.variables.italic, bold = styles.keywords.bold },
    ["@variable.member"]        = { fg = c.gray100 },

    ["@constant"]               = { fg = c.gray400 },
    ["@constant.builtin"]       = { fg = c.gray400, bold = styles.keywords.bold },
    ["@constant.macro"]         = { fg = c.gray400 },

    ["@module"]                 = { fg = c.gray400 },
    ["@module.builtin"]         = { fg = c.gray400, bold = styles.keywords.bold },
    ["@label"]                  = "Label",

    ["@string"]                 = "String",
    ["@string.regexp"]          = { fg = c.gray300 },
    ["@string.escape"]          = { fg = c.gray500 },
    ["@string.special"]         = "String",
    ["@string.special.symbol"]  = "Identifier",
    ["@string.special.url"]     = { fg = c.gray300 },

    ["@character"]              = "Character",
    ["@character.special"]      = "Character",

    ["@boolean"]                = "Boolean",
    ["@number"]                 = "Number",
    ["@number.float"]           = "Number",
    ["@float"]                  = "Number",

    ["@type"]                   = { fg = c.gray100 },
    ["@type.builtin"]           = { fg = c.gray100, bold = styles.keywords.bold },

    ["@attribute"]              = { fg = c.gray300 },
    ["@attribute.builtin"]      = { fg = c.gray300, bold = styles.keywords.bold },
    ["@property"]               = { fg = c.gray200, italic = styles.variables.italic },

    ["@function"]               = "Function",
    ["@function.builtin"]       = { fg = c.gray200, bold = styles.functions.bold },
    ["@function.macro"]         = "Function",
    ["@function.method"]        = "Function",
    ["@function.method.call"]   = "Function",
    ["@function.method.php"]    = "Function",
    ["@function.method.call.php"] = "Function",

    ["@method.php"]             = "@function.method.php",
    ["@method.call.php"]        = "@function.method.call.php",

    ["@constructor"]            = { fg = c.gray200 },
    ["@operator"]               = "Operator",

    ["@keyword"]                = "Keyword",
    ["@keyword.modifier"]       = { fg = c.gray300 },
    ["@keyword.function"]       = { fg = c.gray200 },
    ["@keyword.operator"]       = { fg = c.gray200 },
    ["@keyword.import"]         = { fg = c.gray200 },
    ["@keyword.storage"]        = { fg = c.gray200 },
    ["@keyword.repeat"]         = { fg = c.gray200 },
    ["@keyword.return"]         = { fg = c.gray200 },
    ["@keyword.debug"]          = { fg = c.gray200 },
    ["@keyword.exception"]      = { fg = c.gray200 },
    ["@keyword.conditional"]    = { fg = c.gray200 },
    ["@keyword.conditional.ternary"] = { fg = c.gray200 },
    ["@keyword.directive"]      = { fg = c.gray200 },
    ["@keyword.directive.define"] = { fg = c.gray200 },

    -- Punctuation
    ["@punctuation.delimiter"]  = { fg = c.gray500 },
    ["@punctuation.bracket"]    = { fg = c.gray300 },
    ["@punctuation.special"]    = { fg = c.gray500 },

    -- Comments
    ["@comment"]                = "Comment",
    ["@comment.error"]          = { fg = c.error },
    ["@comment.warning"]        = { fg = c.warning },
    ["@comment.todo"]           = { fg = c.todo, bg = c.todo },
    ["@comment.hint"]           = { fg = c.hint, bg = c.hint },
    ["@comment.info"]           = { fg = c.info, bg = c.info },
    ["@comment.note"]           = { fg = c.cyan700, bg = c.cyan700 },

    -- Markup
    ["@markup.strong"]          = { bold = styles.keywords.bold },
    ["@markup.italic"]          = { italic = styles.comments.italic },
    ["@markup.strikethrough"]   = { strikethrough = true },
    ["@markup.underline"]       = { underline = true },
    ["@markup.heading"]         = { fg = c.gray200, bold = styles.keywords.bold },
    ["@markup.quote"]           = { fg = c.gray50 },
    ["@markup.math"]            = "Special",
    ["@markup.environment"]     = "Macro",
    ["@markup.environment.name"] = "@type",
    ["@markup.link.markdown_inline"] = { fg = c.gray500 },
    ["@markup.link.label.markdown_inline"] = { fg = c.gray200 },
    ["@markup.link.url"]        = { fg = c.gray300 },
    ["@markup.raw.delimiter.markdown"] = { fg = c.gray500 },
    ["@markup.list"]            = { fg = c.gray500 },
    ["@markup.list.checked"]    = { fg = c.gray200, bg = c.gray200 },
    ["@markup.list.unchecked"]  = { fg = c.gray50 },
    ["@markup.heading.1.markdown"] = "markdownH1",
    ["@markup.heading.2.markdown"] = "markdownH2",
    ["@markup.heading.3.markdown"] = "markdownH3",
    ["@markup.heading.4.markdown"] = "markdownH4",
    ["@markup.heading.5.markdown"] = "markdownH5",
    ["@markup.heading.6.markdown"] = "markdownH6",
    ["@markup.heading.1.marker.markdown"] = "markdownH1Delimiter",
    ["@markup.heading.2.marker.markdown"] = "markdownH2Delimiter",
    ["@markup.heading.3.marker.markdown"] = "markdownH3Delimiter",
    ["@markup.heading.4.marker.markdown"] = "markdownH4Delimiter",
    ["@markup.heading.5.marker.markdown"] = "markdownH5Delimiter",
    ["@markup.heading.6.marker.markdown"] = "markdownH6Delimiter",

    ["@diff.plus"]              = { fg = c.git.add, bg = c.diff.add },
    ["@diff.minus"]             = { fg = c.git.delete, bg = c.diff.delete },
    ["@diff.delta"]             = { bg = c.diff.change },
    Added                       = { fg = c.git.add },
    Changed                     = { fg = c.git.change },
    Removed                     = { fg = c.git.delete },

    ["@tag"]                    = "Tag",
    ["@tag.attribute"]          = { fg = c.gray300 },
    ["@tag.delimiter"]          = { fg = c.gray500 },

    ["@conceal"]                = "Conceal",
    ["@conceal.markdown"]       = { fg = c.gray500 },

    -- LSP Semantic tokens
    ["@lsp.type.comment"]       = {},
    ["@lsp.type.comment.c"]     = "@comment",
    ["@lsp.type.comment.cpp"]   = "@comment",
    ["@lsp.type.enum"]          = "@type",
    ["@lsp.type.interface"]     = "@interface",
    ["@lsp.type.keyword"]       = "@keyword",
    ["@lsp.type.namespace"]     = "@namespace",
    ["@lsp.type.namespace.python"] = "@variable",
    ["@lsp.type.parameter"]     = "@parameter",
    ["@lsp.type.property"]      = "@property",
    ["@lsp.type.variable"]      = {}, -- defer to treesitter for regular variables
    ["@lsp.type.variable.svelte"] = "@variable",
    ["@lsp.typemod.function.defaultLibrary"] = "@function.builtin",
    ["@lsp.typemod.operator.injected"] = "@operator",
    ["@lsp.typemod.string.injected"] = "@string",
    ["@lsp.typemod.variable.constant"] = "@constant",
    ["@lsp.typemod.variable.defaultLibrary"] = "@variable.builtin",
    ["@lsp.typemod.variable.injected"] = "@variable",

    ["@annotation"] = { fg = c.gray300 },
    ["@namespace"] = { fg = c.gray200 },
    ["@parameter"] = { fg = c.gray100, italic = styles.variables.italic },
    ["@field"] = { fg = c.gray200 },
    ["@interface"] = { fg = c.gray100 },
    ["@symbol"] = { fg = c.gray300 },
    ["@text"] = { fg = c.fg },
    ["@text.strong"] = { bold = styles.keywords.bold },
    ["@text.emphasis"] = { italic = styles.comments.italic },
    ["@text.strike"] = { strikethrough = true },
    ["@text.literal"] = { fg = c.gray400 },
    ["@text.uri"] = { fg = c.gray300, underline = true },
    ["@text.title"] = { fg = c.gray200, bold = styles.keywords.bold },
    ["@text.todo"] = { fg = c.todo, bg = c.todo },
    ["@text.note"] = { fg = c.info, bg = c.info },
    ["@text.warning"] = { fg = c.warning, bg = c.warning },
    ["@text.danger"] = { fg = c.error, bg = c.error },
    
    ["@parameter.builtin"] = "@variable.parameter.builtin",
    ["@field.key"] = "@property",
    ["@namespace.builtin"] = { fg = c.gray200, bold = styles.keywords.bold },
    
    -- Language specific overrides
    ["@constructor.lua"] = { fg = c.gray200 },
    ["@function.call.lua"] = { fg = c.gray200 },
    ["@keyword.function.lua"] = { fg = c.gray200 },
    
    -- CSS
    ["@property.css"] = { fg = c.gray300 },
    ["@string.css"] = { fg = c.gray400 },
    ["@type.css"] = { fg = c.gray200 },
    
    -- JSON
    ["@label.json"] = { fg = c.gray300 },
    
    -- YAML
    ["@field.yaml"] = { fg = c.gray300 }
  }
end

return M